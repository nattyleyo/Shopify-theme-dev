{% assign collection = collections[section.settings.collection] %}

{% if collection != blank %}

  <div class="color-box title-bb">
    <div class="title-style">{{ section.settings.section_title }}</div>
    <a href="{{ routes.all_products_collection_url }}" class="label-style-5">View All</a>
  </div>
  <div class="cate-list">
    <div class="list-2">
      {% for product in collection.products limit: section.settings.products_limit %}
        <a href="{{ product.url }}" class="pr-card">
          <div class="img-box">
            
            {% if product.tags contains 'new' %}
              <div class="tag">
                <div class="label-style-6">NEW!</div>
              </div>
            {% elsif product.tags contains 'best-selling' %}
              <div class="tag-2">
                <div class="label-style-7">Best Seller</div>
              </div>
            {% elsif product.tags contains 'most-popular' %}
              <div class="tag-3">
                <div class="label-style-6">Most-Popular</div>
              </div>
            {% endif %}
            <img
              src="{{ product.featured_image | img_url: 'medium' }}"
              alt="{{ product.title }}"
              class="product-img"
              loading="lazy"
              width="260"
              height="230"
            />
          </div>
          <div class="content-box">
            <div class="review-no-box">
              {% if product.metafields.reviews.rating.value %}
                <div class="star-rating">
                  {% assign rating = product.metafields.reviews.rating.value.rating | round: 1 %}
                  {% assign max_rating = product.metafields.reviews.rating.value.scale_max | default: 5 %}
                  {% assign percentage = rating | divided_by: max_rating | times: 100 %}
                  
                  <div class="stars-outer">
                    <div class="stars-inner" style="width: {{ percentage }}%"></div>
                  </div>
                  
                  <span class="rating-value">{{ rating | round: 1 }}</span>
                </div>
              {% endif %}
              
              <div class="review-no">
                {% if product.metafields.reviews.rating_count %}
                  {{ product.metafields.reviews.rating_count }} Reviews
                {% else %}
                  No reviews yet
                {% endif %}
              </div>
            </div>
            
            <div class="color-box">
              <div class="title-style-5">Color</div>
              <div class="frame-144">
                {% assign color_option_index = 0 %}
                {% for option in product.options_with_values %}
                  {% if option.name == 'Color' %}
                    {% assign color_option_index = forloop.index0 %}
                  {% endif %}
                {% endfor %}
                
                {% assign colors_displayed = '' %}
                
                {% for variant in product.variants %}
                  {% assign color = variant.options[color_option_index] %}
                  
                  {% unless colors_displayed contains color %}
                    {% assign colors_displayed = colors_displayed | append: color | append: ',' %}
                    <div class="dot-3 color-dot" title="{{ color }}" style="background: {{ color }}; width:16px !important;height:16px !important;border-radius:100%"></div>
                  {% endunless %}
                {% endfor %}
              </div>
            </div>
            
            <div class="pr-card-title">{{ product.title }}</div>
            <div class="price">
              <div class="text-2">{{ product.price | money }}</div>
            </div>
          </div>
        </a>
      {% endfor %}
    </div>
  </div>
{% endif %}

<style>
    /* Star Rating Styles */
.star-rating {
  display: flex;
  align-items: center;
  margin-right: 8px;
  position: relative;
}

.stars-outer {
  display: inline-block;
  position: relative;
  font-size: 18px;
  letter-spacing: 2px;
}

.stars-outer::before {
  content: "★★★★★";
  color: #ddd;
}

.stars-inner {
  position: absolute;
  top: 0;
  left: 0;
  white-space: nowrap;
  overflow: hidden;
}

.stars-inner::before {
  content: "★★★★★";
  color: #ECB213;
}

.rating-value {
  font-size: 14px;
  margin-left: 5px;
  color: #333;
  font-weight: 500;
}

.review-no-box {
  display: flex;
  align-items: center;
  margin-bottom: 8px;
}

.review-no {
  font-size: 14px;
  color: #010101;
}
</style>

<style>
    /* Add this to your CSS file or within a <style> tag in your HTML */

  .pr-card .img-box {
    transition: transform 0.3s ease-in-out; /* Smooth scaling transition */
  }

  .pr-card:hover .img-box {
    transform: scale(1.03); /* Scale the image to 110% when hovered */
  }

  .product-img {
    width: 100%; /* Ensure the image fills the container */
    height: auto;
    transition: transform 0.3s ease-in-out; /* Smooth transition for the image itself */
  }

  .pr-card:hover .product-img {
    transform: scale(1.09); /* Scale the image up on hover */
  }

</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get the next button and product list container
    const nextBtn = document.querySelector('.next-btn');
    const productList = document.querySelector('.list-2');
    
    if (nextBtn && productList) {
      // Get all product cards
      const productCards = document.querySelectorAll('.pr-card');
      let currentIndex = 0;
      const cardWidth = productCards[0] ? productCards[0].offsetWidth : 0;
      const gap = 20; // Adjust this value based on your actual gap between cards
      
      nextBtn.addEventListener('click', function() {
        // Check if there are more cards to scroll to
        if (currentIndex < productCards.length - 1) {
          currentIndex++;
          
          // Calculate scroll position
          const scrollAmount = (cardWidth + gap) * currentIndex;
          
          // Smooth scroll to the next card
          productList.scrollTo({
            left: scrollAmount,
            behavior: 'smooth'
          });
        } else {
          // If at the end, scroll back to the first card
          currentIndex = 0;
          productList.scrollTo({
            left: 0,
            behavior: 'smooth'
          });
        }
      });
      
      // Optional: Add previous button functionality if needed
      // const prevBtn = document.querySelector('.prev-btn');
      // if (prevBtn) {
      //   prevBtn.addEventListener('click', function() {
      //     if (currentIndex > 0) {
      //       currentIndex--;
      //       const scrollAmount = (cardWidth + gap) * currentIndex;
      //       productList.scrollTo({
      //         left: scrollAmount,
      //         behavior: 'smooth'
      //       });
      //     }
      //   });
      // }
    }
  });
</script>

{% schema %}
{
  "name": "Top Selling Products",
  "tag": "section",
  "class": "top-selling",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Top Selling Collection"
    },
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Top Selling"
    },
    {
      "type": "richtext",
      "id": "view_all_text",
      "label": "View All Text",
      "default": "<p>View All</p>"
    },
    {
      "type": "number",
      "id": "products_limit",
      "label": "Number of products to show",
      "default": 5
    }
  ],
  "presets": [
    {
      "name": "Top Selling Products",
      "category": "Featured"
    }
  ]
}
{% endschema %}

