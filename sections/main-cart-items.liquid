{{ 'component-cart.css' | asset_url | stylesheet_tag }}
{{ 'component-cart-items.css' | asset_url | stylesheet_tag }}
{{ 'component-totals.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'component-discounts.css' | asset_url | stylesheet_tag }}
{{ 'quantity-popover.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- unless settings.cart_type == 'drawer' -%}
  <script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
{%- endunless -%}

<script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>

<cart-items class="gradient color-{{ section.settings.color_scheme }} isolate{% if cart == empty %} is-empty{% else %} section-{{ section.id }}-padding{% endif %}">
  <div class="page-width">
    <div class="title-wrapper-with-link">
      <h1 class="title title--primary title-style">{{ 'sections.cart.title' | t }}</h1>
      <a href="{{ routes.all_products_collection_url }}" class="underlined-link">
        {{- 'general.continue_shopping' | t -}}
      </a>
    </div>

    <div class="cart__warnings">
      <h1 class="cart__empty-text">{{ 'sections.cart.empty' | t }}</h1>
      <a href="{{ routes.all_products_collection_url }}" class="button">
        {{ 'general.continue_shopping' | t }}
      </a>

      {%- if shop.customer_accounts_enabled and customer == null -%}
        <h2 class="cart__login-title">{{ 'sections.cart.login.title' | t }}</h2>
        <p class="cart__login-paragraph">
          {{ 'sections.cart.login.paragraph_html' | t: link: routes.account_login_url }}
        </p>
      {%- endif -%}
    </div>

    <form action="{{ routes.cart_url }}" class="cart__contents critical-hidden" method="post" id="cart">
      <div class="cart__items" id="main-cart-items" data-id="{{ section.id }}">
        <div class="js-contents">
          {%- if cart != empty -%}
            {%- for item in cart.items -%}
              <div class="cart-itm" data-product-id="{{ item.selected_or_first_available_variant.id }}" data-line-item="{{ forloop.index }}">
                <div class="cart-col1">
                    <div class="img-b img-carts">
                      <img
                        src="{{ item.image | img_url: '200x200' }}"
                        loading="lazy"
                        width="auto"
                        height="auto"
                        alt=""
                        class="img-style"
                      />
                    </div>
                    <div class="content-box">
                      <a href="{{ item.product.url }}" class="title-item title-carts">{{ item.title }}</a>
                      <div class="title-item price-carts">{{ item.original_price  | money_without_trailing_zeros }}</div>
                      <div class="color-box">
                        <div class="title-style-5">Color</div>
                        <div class="frame-144">          
                            {% assign color = item.variant.options %}
                            <div class="dot-3 color-dot" title="{{ color }}" style="background: {{ color }}; width:16px !important;height:16px !important;border-radius:100%"></div>
                        </div>
                      </div>
                      
                    </div>
                </div>
                

                <div class="right-box">

                  <div class="price-2">
                    <div class="prices" data-line-price="{{ forloop.index }}">{{ item.original_line_price | money }}</div>
                    <div class="input-div">
                      <div class="add-sub subtract" data-line="{{ forloop.index }}">
                        <div class="icon-embed-xxsmall-2 w-embed">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            xmlns:xlink="http://www.w3.org/1999/xlink"
                            aria-hidden="true"
                            role="img"
                            class="iconify iconify--ic"
                            width="100%"
                            height="100%"
                            preserveAspectRatio="xMidYMid meet"
                            viewBox="0 0 24 24"
                          >
                            <path
                              fill="currentColor"
                              d="M19 12.998H5v-2h14z"
                            ></path>
                          </svg>
                        </div>
                      </div>
                      <input type="number" placeholder="1" value="{{ item.quantity }}" class="input input-item" data-line="{{ forloop.index }}" data-maxitem="{{ section.settings.maxItem | default: 100 }}" data-variant-id="{{ item.variant.id }}" min="1" max="{{ section.settings.maxItem | default: 100 }}"/>
                      <div class="add-sub add" data-line="{{ forloop.index }}">
                        <div class="icon-embed-xxsmall w-embed">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            xmlns:xlink="http://www.w3.org/1999/xlink"
                            aria-hidden="true"
                            role="img"
                            class="iconify iconify--ic"
                            width="100%"
                            height="100%"
                            preserveAspectRatio="xMidYMid meet"
                            viewBox="0 0 24 24"
                          >
                            <path
                              fill="currentColor"
                              d="M19 12.998h-6v6h-2v-6H5v-2h6v-6h2v6h6z"
                            ></path>
                          </svg>
                        </div>
                      </div>
                    </div>
                  </div>
                  <button type="button" class="cart-item__remove" data-line-item="{{ forloop.index }}" data-variant-id="{{ item.variant.id }}" aria-label="Remove item">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <polyline points="3 6 5 6 21 6"></polyline>
                      <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                      <line x1="10" y1="11" x2="10" y2="17"></line>
                      <line x1="14" y1="11" x2="14" y2="17"></line>
                    </svg>
                  </button>
              </div>
              </div>
              <div class="divider"></div>
            {% endfor %}
          {%- endif -%}
        </div>
      </div>

      <p class="visually-hidden" id="cart-live-region-text" aria-live="polite" role="status"></p>
      <p
        class="visually-hidden"
        id="shopping-cart-line-item-status"
        aria-live="polite"
        aria-hidden="true"
        role="status"
      >
        {{ 'accessibility.loading' | t }}
      </p>
    </form>
  </div>
</cart-items>

<style>
  .cart-item__remove {
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    margin-left: 10px;
    color: #666;
    transition: color 0.2s ease;
  }
  
  .cart-item__remove:hover {
    color: #d32f2f;
  }
  
  .cart-item__remove svg {
    width: 20px;
    height: 20px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle quantity changes
    document.querySelectorAll('.input-item').forEach(input => {
      const line = input.dataset.line;
      const maxItem = parseInt(input.dataset.maxitem) || 100;
      const subtractBtn = document.querySelector(`.subtract[data-line="${line}"]`);
      const addBtn = document.querySelector(`.add[data-line="${line}"]`);
      const priceElement = document.querySelector(`[data-line-price="${line}"]`);
      const variantId = input.dataset.variantId;
      const unitPrice = parseFloat(priceElement.textContent.replace(/[^0-9.]/g, '')) / parseInt(input.value);
  
      // Set max attribute
      input.setAttribute('max', maxItem);
  
      // Subtract button click
      subtractBtn.addEventListener('click', function() {
        let currentValue = parseInt(input.value);
        if (currentValue > 1) {
          input.value = currentValue - 1;
          updateLinePrice(input, priceElement, unitPrice);
          updateCartItem(variantId, input.value);
        }
      });
  
      // Add button click
      addBtn.addEventListener('click', function() {
        let currentValue = parseInt(input.value);
        if (currentValue < maxItem) {
          input.value = currentValue + 1;
          updateLinePrice(input, priceElement, unitPrice);
          updateCartItem(variantId, input.value);
        }
      });
  
      // Update price while typing
      input.addEventListener('input', function(e) {
        let value = parseInt(e.target.value);
        const max = parseInt(e.target.max) || 100;
        const min = parseInt(e.target.min) || 1;
        
        if (isNaN(value)) {
          // If not a number, show 1 but don't update price yet
          value = '';
        } else {
          // Clamp the value between min and max
          value = Math.min(Math.max(value, min), max);
          updateLinePrice(input, priceElement, unitPrice, value);
        }
        
        // Update the input value (this won't trigger another input event)
        if (e.target.value !== value.toString()) {
          e.target.value = value;
        }
      });
  
      // Final validation on blur
      input.addEventListener('change', function() {
        let value = parseInt(input.value);
        const max = parseInt(input.max) || 100;
        const min = parseInt(input.min) || 1;
        
        if (isNaN(value) || value < min) {
          value = min;
        } else if (value > max) {
          value = max;
        }
        
        input.value = value;
        updateLinePrice(input, priceElement, unitPrice);
        updateCartItem(variantId, input.value);
      });
    });
  
    function updateLinePrice(input, priceElement, unitPrice, currentValue = null) {
      const quantity = currentValue !== null ? currentValue : parseInt(input.value);
      if (isNaN(quantity)) return; // Don't update if not a number
      
      const newPrice = unitPrice * quantity;
      priceElement.textContent = formatMoney(newPrice);
    }
  
    function formatMoney(amount) {
      return '$' + amount.toFixed(2);
    }
  
    function updateCartItem(variantId, quantity) {
      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity
        })
      })
      .then(response => response.json())
      .then(data => {
        // Optional: Update cart count or other elements if needed
        const cartCount = document.querySelectorAll('.cart-count-bubble');
        if (cartCount) {
          cartCount.forEach(el => {
            el.textContent = data.item_count;
          });
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
    }

    // Handle remove item clicks
  document.querySelectorAll('.cart-item__remove').forEach(button => {
    button.addEventListener('click', function() {
      const lineItem = this.closest('.cart-itm');
      const variantId = this.dataset.variantId;
      
      // Remove the item visually first for better UX
      lineItem.style.opacity = '0.5';
      lineItem.style.pointerEvents = 'none';
      
      // Remove from cart
      fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          id: variantId,
          quantity: 0
        })
      })
      .then(response => response.json())
      .then(data => {
        // Remove the item from DOM
        lineItem.remove();
        
        // Check if cart is empty
        if (data.item_count === 0) {
          document.querySelector('.cart__warnings').classList.remove('hidden');
          document.querySelector('.js-contents').classList.add('hidden');
        }
        
        // Update cart count
        const cartCount = document.querySelectorAll('.cart-count-bubble');
        if (cartCount) {
          cartCount.forEach(el => {
            el.textContent = data.item_count;
          });
        }
        
        // Optional: Reload the page to ensure all cart updates are reflected
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        // Reset the item if there was an error
        lineItem.style.opacity = '1';
        lineItem.style.pointerEvents = 'auto';
      });
    });
  });
});
  </script>

{% schema %}
{
  "name": "t:sections.main-cart-items.name",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    
    {
      "type": "range",
      "id": "maxItem",
      "min": 1,
      "max": 100,
      "step": 1,
      "label": "Maximum quantity per item",
      "default": 10
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}