{% assign collection = collections[section.settings.collection] %}

  <div class="title-style">{{ section.settings.title }}</div>
  <div class="gear-box" >
    {% render 'ctm-slideShow' settings:section.settings, blocks:section.blocks, slideShowId:"slide-show-gear" %}
    {% if collection != blank %}
      <div class="cart-lists">
        <div class="list-3">
          {% for product in collection.products limit: section.settings.products_limit %}
            <div class="cart-itm" data-product-id="{{ product.selected_or_first_available_variant.id }}">
              <div class="no">
                <div class="label-style-9">{{ forloop.index }}</div>
              </div>
              <div class="img-b">
                <img
                  src="{{ product.featured_image | img_url: '200x200' }}"
                  loading="lazy"
                  width="auto"
                  height="auto"
                  alt=""
                  class="img-style"
                />
              </div>
              <div class="content-box">
                <div class="title-item">{{ product.title | truncate:20 }}</div>
                <div class="color-box">
                  <div class="title-style-5">Color</div>
                  <div class="frame-144">
                    {% assign color_option_index = 0 %}
                    {% for option in product.options_with_values %}
                      {% if option.name == 'Color' %}
                        {% assign color_option_index = forloop.index0 %}
                      {% endif %}
                    {% endfor %}
                    
                    {% assign colors_displayed = '' %}
                    
                    {% for variant in product.variants %}
                      {% assign color = variant.options[color_option_index] %}
                      
                      {% unless colors_displayed contains color %}
                        {% assign colors_displayed = colors_displayed | append: color | append: ',' %}
                        <div class="dot-3 color-dot" title="{{ color }}" style="background: {{ color }}; width:16px !important;height:16px !important;border-radius:100%"></div>
                      {% endunless %}
                    {% endfor %}
                  </div>
                </div>
                
              </div>
              <div class="price-2">
                <div class="prices">{{ product.price | money }}</div>
                <div class="input-div">
                  
                  <div class="add-sub subtract">
                    <div class="icon-embed-xxsmall-2 w-embed">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        aria-hidden="true"
                        role="img"
                        class="iconify iconify--ic"
                        width="100%"
                        height="100%"
                        preserveAspectRatio="xMidYMid meet"
                        viewBox="0 0 24 24"
                      >
                        <path
                          fill="currentColor"
                          d="M19 12.998H5v-2h14z"
                        ></path>
                      </svg>
                    </div>
                  </div>
                  <input type="number" placeholder="1" class="input input-item" data-maxitem="{{ section.settings.maxItem }}"/>
                  <div class="add-sub">
                    <div class="icon-embed-xxsmall w-embed">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink"
                        aria-hidden="true"
                        role="img"
                        class="iconify iconify--ic"
                        width="100%"
                        height="100%"
                        preserveAspectRatio="xMidYMid meet"
                        viewBox="0 0 24 24"
                      >
                        <path
                          fill="currentColor"
                          d="M19 12.998h-6v6h-2v-6H5v-2h6v-6h2v6h6z"
                        ></path>
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="divider"></div>
          {% endfor %}
          
          
          
        </div>
        <div class="cta-box">
          <div class="cart-btn">
            <img
              src="https://cdn.prod.website-files.com/67f4ea3ec31bfd1ce606f755/67f4ee456cb6132fec1a35b9_Frame.svg"
              loading="lazy"
              width="18"
              height="18"
              alt=""
              class="frame-style"
            />
            <div class="text-5">Add All To Cart</div>
          </div>
        </div>
      </div>
    {% else %}
      <div class="empty-state" style="width:50%;height:300px;display:flex;justify-content:center;align-items:center; padding:24px; font-size:26px">No Collection Selected</div>
    {% endif %}
    
  </div>
  <style>
    /* Hide number input spinners */
    .input-item::-webkit-outer-spin-button,
    .input-item::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    
    /* Firefox */
    .input-item[type=number] {
      -moz-appearance: textfield;
    }
  </style>


  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Quantity input functionality
      document.querySelectorAll('.input-item').forEach(function(input) {
        const container = input.closest('.input-div');
        const addBtn = container.querySelector('.add-sub:not(.subtract)');
        const subtractBtn = container.querySelector('.add-sub.subtract');
        const maxItem = parseInt(input.dataset.maxitem) || 20; // Fallback to 20 if not set
        
        // Set initial value to 1 if empty
        if (!input.value || input.value < 1) input.value = 1;
        
        // Add button click handler
        addBtn.addEventListener('click', function() {
          let value = parseInt(input.value) || 0;
          if (value < maxItem) {
            input.value = value + 1;
          }
        });
        
        // Subtract button click handler
        subtractBtn.addEventListener('click', function() {
          let value = parseInt(input.value) || 0;
          if (value > 1) {
            input.value = value - 1;
          }
        });
        
        // Input validation
        input.addEventListener('input', function(e) {
          // Allow empty value during editing
          if (e.target.value === '') return;
          
          let value = parseInt(e.target.value);
          
          if (isNaN(value)) {
            e.target.value = 1;
          } else if (value < 1) {
            e.target.value = 1;
          } else if (value > maxItem) {
            e.target.value = maxItem;
          }
        });
        
        // Handle blur to ensure valid value when leaving field
        input.addEventListener('blur', function(e) {
          if (e.target.value === '' || e.target.value < 1) {
            e.target.value = 1;
          }
        });
        
        // Prevent non-numeric input
        input.addEventListener('keydown', function(e) {
          // Allow: backspace, delete, tab, escape, enter
          if ([46, 8, 9, 27, 13].includes(e.keyCode) || 
              // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
              (e.keyCode === 65 && e.ctrlKey === true) || 
              (e.keyCode === 67 && e.ctrlKey === true) || 
              (e.keyCode === 86 && e.ctrlKey === true) || 
              (e.keyCode === 88 && e.ctrlKey === true) ||
              // Allow: home, end, left, right
              (e.keyCode >= 35 && e.keyCode <= 39)) {
            return;
          }
          
          // Ensure it's a number and stop the keypress if not
          if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
          }
        });
      });

    // Add All To Cart functionality
  document.querySelector('.cart-btn').addEventListener('click', async function() {
    const productItems = document.querySelectorAll('.cart-itm');
    const items = [];
    const btn = this;
    
    // Show loading state
    btn.classList.add('loading');
    btn.disabled = true;
    btn.querySelector('.text-5').textContent = 'Adding...';
    
    // Gather all products and quantities
    productItems.forEach(item => {
      const productId = item.dataset.productId;
      const quantity = parseInt(item.querySelector('.input-item').value) || 1;
      items.push({ id: productId, quantity });
    });

    try {
      // Add items sequentially
      for (const item of items) {
        await addToCart(item.id, item.quantity);
      }
      
      // Success - redirect to cart
      window.location.href = '/cart';
    } catch (error) {
      console.error('Error adding to cart:', error);
      alert('Error adding items to cart. Please try again.');
    } finally {
      // Reset button state
      btn.classList.remove('loading');
      btn.disabled = false;
      btn.querySelector('.text-5').textContent = 'Add All To Cart';
    }
  });

  // Helper function to add single item to cart
  function addToCart(variantId, quantity) {
    return fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        id: variantId,
        quantity: quantity
      })
    }).then(response => {
      if (!response.ok) throw new Error('Failed to add to cart');
      return response.json();
    });
  }
});
</script>

<style>
  /* Add loading state styles */
  .cart-btn.loading {
    opacity: 0.7;
    pointer-events: none;
  }
  .cart-btn.loading .frame-style {
    animation: spin 0.5s linear infinite;
  }
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

{% schema %}
{
  "name": "GearUp",
  "tag": "section",
  "class": "gearup-sec GearUp",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Select Collection"
    },
    
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Don&#x27;t Miss Out Gear Up Now!"
    },
    {
      "type": "number",
      "id": "products_limit",
      "label": "Number of products to show",
      "default": 3
    },
    {
      "type": "range",
      "id": "maxItem",
      "label": "Max Item",
      "min": 1,
      "max": 100,
      "step": 1,
      "default": 3,
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Enable autoplay",
      "default": true
    },
    {
      "type": "range",
      "id": "delay",
      "label": "Slide delay (seconds)",
      "min": 1,
      "max": 100,
      "step": 1,
      "default": 3,
      "unit": "s"
    },
   
  ],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        {
        "type": "image_picker",
        "id": "slide_image",
        "label": "Image",
        },
      ]
    }
  ],
  "presets": [
    {
      "name": "GearUp",
      "category": "Custom",
      "blocks": [
          {
            "type": "slide",
          }

        ]
    }
  ]
}
{% endschema %}