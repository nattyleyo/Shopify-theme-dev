{% comment %}
  This section is used to create a product gallery with a top image, multiple images in a scrollable box,
  and dynamic color variant selection. The images are responsive and adapt to different screen sizes.

  Accepts:
  - product: {Object} Product Liquid object
  - section: {Object} Section settings
{% endcomment %}

{%- assign gallery = product.metafields.custom.gallery_product.value -%}
{%- assign top_image = gallery.top_image -%}
{%- assign image_gallery = gallery.bottom_images.value -%}

{%- if gallery -%}
  <div class="gallery-container">
    <img
      src="{{ top_image | img_url: '608x' }}"
      loading="lazy"
      width="608"
      height="400"
      alt="{{ top_image.alt | escape }}"
      srcset="
        {{ top_image | img_url: '500x' }} 500w,
        {{ top_image | img_url: '608x' }} 608w
      "
      sizes="(max-width: 608px) 100vw, 608px"
      class="img-top"
      data-variant-image
    />

    <div class="image-box">
      {% for image in image_gallery %}
        <img
          src="{{ image | img_url: '608x' }}"
          loading="lazy"
          width="auto"
          height="auto"
          alt="{{ image.alt | escape }}"
          class="img img-h"
        />
      {% endfor %}
    </div>

    {% if product.variants.size > 1 %}
      <div class="color-box">
        <div class="box-title">Color</div>
        <div class="color-div">
          {% assign color_option_index = 0 %}
          {% for option in product.options_with_values %}
            {% if option.name == 'Color' %}
              {% assign color_option_index = forloop.index0 %}
            {% endif %}
          {% endfor %}
          {% assign colors_displayed = '' %}
          {% for variant in product.variants %}
            {% assign color = variant.options[color_option_index] %}
            {% unless colors_displayed contains color %}
              {% assign colors_displayed = colors_displayed | append: color | append: ',' %}
              <div 
                class="color-dot {% if forloop.first %}active{% endif %}" 
                title="{{ color | escape }}"
                style="background: {{ color }}; width:16px !important; height:16px !important; border-radius:100%"
                data-variant-id="{{ variant.id }}"
                data-image="{{ variant.image | img_url: '608x' }}"
              ></div>
            {% endunless %}
          {% endfor %}
        </div>
      </div>
    {% endif %}

    <div class="contents-2">
      <div class="card-content-3">
        <div class="sec-headline">
          {{ section.settings.headline }}
        </div>
        <div class="sec-subtext">
          {{ section.settings.subtext }}
        </div>
      </div>
    </div>
  </div>
{%- endif -%}

<style>
  .image-box {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* Internet Explorer 10+ */
  }

  .image-box::-webkit-scrollbar {
    display: none; /* Chrome, Safari, and Edge */
  }

  .image-box.dragging {
    cursor: grabbing;
    cursor: -webkit-grabbing;
  }

  .image-box {
    cursor: grab;
    cursor: -webkit-grab;
    display: flex;
    overflow: hidden;
    white-space: nowrap;
    gap: 15px;
  }

  /* Variant Selection Styles */
  .color-box {
    margin: 20px 0;
  }

  .color-div {
    display: flex;
    gap: 10px;
    margin-top: 8px;
  }

  .color-dot {
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-block;
    opacity: 0.6;
    border: 2px solid transparent;
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
  }

  .color-dot.active {
    opacity: 1;
    transform: scale(1.3);
    border: 2px solid #333;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);
  }

  .color-dot:hover {
    opacity: 0.8;
    transform: scale(1.1);
  }

  .img-top {
    transition: opacity 0.3s ease;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Variant Selection
    const colorDots = document.querySelectorAll('.color-dot');
    const topImage = document.querySelector('.img-top');
    const imageBox = document.querySelector('.image-box');

    colorDots.forEach(dot => {
      dot.addEventListener('click', function(event) {
        event.preventDefault(); // Prevent any default behavior

        // Remove active class from all dots
        colorDots.forEach(d => d.classList.remove('active'));
        // Add active class to clicked dot
        this.classList.add('active');

        // Update top image
        const variantImage = this.getAttribute('data-image');
        if (topImage && variantImage) {
          topImage.src = variantImage;
          topImage.srcset = `
            ${variantImage.replace('608x', '500x')} 500w,
            ${variantImage} 608w
          `;
        }

        // Update gallery images (assuming variant-specific gallery images)
        // Note: Adjust this if gallery images are managed via metafields
        if (imageBox) {
          // Clear existing images
          imageBox.innerHTML = '';
          // Add placeholder for variant-specific images (modify as needed)
          const variantId = this.getAttribute('data-variant-id');
          // Assuming variant.image is used; adjust if using metafields
          const newImage = document.createElement('img');
          newImage.src = variantImage;
          newImage.className = 'img img-h';
          newImage.loading = 'lazy';
          newImage.alt = this.getAttribute('title') || 'Variant Image';
          imageBox.appendChild(newImage);
          // Clone for infinite scroll
          const clone = newImage.cloneNode(true);
          imageBox.appendChild(clone);
        }
      });
    });

    // Existing Gallery Scroll Functionality
    if (imageBox) {
      // Clone images for seamless infinite scroll
      const images = imageBox.querySelectorAll('.img.img-h');
      images.forEach(img => {
        const clone = img.cloneNode(true);
        imageBox.appendChild(clone);
      });

      imageBox.style.display = 'flex';
      imageBox.style.overflow = 'hidden';
      imageBox.style.whiteSpace = 'nowrap';
      imageBox.style.gap = '15px';

      const scrollSpeed = {{ section.settings.scroll_speed | default: 1 }};
      let scrollPosition = 0;
      let animationId;
      let isHovering = false;

      function animateScroll() {
        if (isHovering) {
          animationId = requestAnimationFrame(animateScroll);
          return;
        }

        scrollPosition += scrollSpeed;
        if (scrollPosition >= imageBox.scrollWidth / 2) {
          scrollPosition = 0;
        }

        imageBox.scrollLeft = scrollPosition;
        animationId = requestAnimationFrame(animateScroll);
      }

      imageBox.addEventListener('mouseenter', () => isHovering = true);
      imageBox.addEventListener('mouseleave', () => isHovering = false);

      // Mouse wheel scroll
      imageBox.addEventListener('wheel', function(e) {
        if (e.deltaY === 0) return;
        e.preventDefault();
        imageBox.scrollLeft += e.deltaY;
        scrollPosition = imageBox.scrollLeft;
      }, { passive: false });

      // Touch support
      let isTouching = false;
      let startX = 0;
      let scrollLeftStart = 0;

      imageBox.addEventListener('touchstart', (e) => {
        isTouching = true;
        startX = e.touches[0].pageX;
        scrollLeftStart = imageBox.scrollLeft;
      });

      imageBox.addEventListener('touchmove', (e) => {
        if (!isTouching) return;
        const x = e.touches[0].pageX;
        const walk = (startX - x);
        imageBox.scrollLeft = scrollLeftStart + walk;
        scrollPosition = imageBox.scrollLeft;
      });

      imageBox.addEventListener('touchend', () => {
        isTouching = false;
      });

      animateScroll();

      // Clean up
      document.addEventListener('shopify:section:unload', function() {
        cancelAnimationFrame(animationId);
      });
    }
  });
</script>

{% schema %}
{
  "name": "Product Gallery",
  "tag": "section",
  "class": "product-gallery",
  "settings": [
    {
      "type": "text",
      "id": "headline",
      "label": "Headline",
      "default": "Seamless Integration into Your Daily Life"
    },
    {
      "type": "textarea",
      "id": "subtext",
      "label": "Subtext",
      "default": "Meet the next generation of eyewear. More than just a pair of glasses, these Smart Glasses are your personal assistant, music hub, and AR navigatorâ€”all in one sleek design."
    },
    {
      "type": "range",
      "id": "scroll_speed",
      "min": 0.1,
      "max": 5,
      "step": 0.1,
      "label": "Scroll Speed",
      "default": 1,
      "info": "Adjust the scrolling speed (lower = slower)"
    }
  ],
  "presets": [
    {
      "name": "Product Gallery",
      "category": "Custom"
    }
  ]
}
{% endschema %}