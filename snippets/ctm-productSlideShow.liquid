{%- comment -%}
  Custom product slideshow snippet
  Usage: {% render 'ctm-product-slideShow', images: product.images, settings: section.settings, slideShowId: "product-slideshow" %}
{%- endcomment -%}

<div class="product-slideShow" data-autoplay="{{ settings.autoplay | default: false }}" data-delay="{{ settings.delay | default: 5 | times: 1000 }}" 
    data-slideshow-id="{{ slideShowId }}">
    <div class="product-img-slides">
      {% for image in images %}
        <img
          src="{{ image | image_url: width: 800 }}"
          loading="lazy"
          width="auto"
          height="auto"
          alt="{{ image.alt | escape }}"
          class="product-slide-image pr-inner-image {% if forloop.first %}active{% endif %}"
          data-index="{{ forloop.index0 }}"
          data-image-id="{{ image.id }}"
        />
      {% else %}
        <div class="product-image-placeholder" style="background: #f5f5f5; height: 500px;"></div>
      {% endfor %}
    </div>
  
    {% if images.size > 1 %}
    <div class="product-slide-buttons">
      <div class="product-slide-arrow left-arrow">
        {{ "icon-arrow-left.svg" | asset_url | img_tag: 'Left arrow', "product-arrow-icon" }}
      </div>
      <div class="product-slide-arrow right-arrow">
        {{ "icon-arrow-right.svg" | asset_url | img_tag: 'Right arrow', "product-arrow-icon" }}
      </div>
    </div>
    {% endif %}
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize each product slideshow
      document.querySelectorAll('.product-slideShow[data-slideshow-id]').forEach(slideshow => {
        const slideShowId = slideshow.dataset.slideshowId;
        const slides = slideshow.querySelectorAll('.product-img-slides .product-slide-image');
        
        if (slides.length <= 1) return;
        
        let currentIndex = 0;
        const totalSlides = slides.length;
        const autoplay = slideshow.dataset.autoplay === 'true';
        const normalDelay = parseInt(slideshow.dataset.delay) || 5000;
        const loopDelay = 1000;
        let autoplayInterval;
        
        // Initialize first slide
        slides[currentIndex].classList.add('active');
        
        function transitionSlides(newIndex) {
          slides[currentIndex].classList.remove('active');
          slides[newIndex].classList.add('active');
          currentIndex = newIndex;
          
          // Dispatch custom event when slide changes
          const event = new CustomEvent('productSlideChanged', {
            detail: {
              imageId: slides[newIndex].dataset.imageId,
              index: newIndex
            }
          });
          slideshow.dispatchEvent(event);
        }
        
        // Create unique function names for this slideshow
        const nextSlideFn = `productNextSlide_${slideShowId}`;
        const prevSlideFn = `productPrevSlide_${slideShowId}`;
        
        window[nextSlideFn] = function() {
          const newIndex = (currentIndex + 1) % totalSlides;
          transitionSlides(newIndex);
          resetAutoplay(newIndex);
        };
        
        window[prevSlideFn] = function() {
          const newIndex = (currentIndex - 1 + totalSlides) % totalSlides;
          transitionSlides(newIndex);
          resetAutoplay(newIndex);
        };
        
        // Update button click handlers
        slideshow.querySelector('.left-arrow').onclick = window[prevSlideFn];
        slideshow.querySelector('.right-arrow').onclick = window[nextSlideFn];
        
        // Autoplay functionality
        function startAutoplay(delay) {
          if (autoplay) {
            autoplayInterval = setInterval(window[nextSlideFn], delay);
          }
        }
        
        function stopAutoplay() {
          clearInterval(autoplayInterval);
        }
        
        function resetAutoplay(newIndex) {
          stopAutoplay();
          const isLooping = newIndex === 0;
          startAutoplay(isLooping ? loopDelay : normalDelay);
        }
        
        // Initialize autoplay
        startAutoplay(normalDelay);
        
        // Pause on hover
        slideshow.addEventListener('mouseenter', stopAutoplay);
        slideshow.addEventListener('mouseleave', () => startAutoplay(normalDelay));
        
        // Optional: Add thumbnail click handlers if they exist on page
        document.querySelectorAll(`[data-slideshow-target="${slideShowId}"]`).forEach(thumb => {
          thumb.addEventListener('click', function() {
            const index = parseInt(this.dataset.slideIndex);
            if (!isNaN(index) && index >= 0 && index < totalSlides) {
              transitionSlides(index);
              resetAutoplay(index);
            }
          });
        });
      });
    });
  </script>
  
  <style>
    .product-slideShow {
      position: relative;
      width: 100%;
    }
    
    .product-img-slides .product-slide-image {
      display: none;
      width: 80%;
      height: auto;
      transition: opacity 0.3s ease;
    }
    
    .product-img-slides .product-slide-image.active {
      display: block;
      animation: productFadeIn 0.5s ease;
    }
    
    @keyframes productFadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .product-slide-buttons {
      position: absolute;
      top: 50%;
      width: 100%;
      display: flex;
      justify-content: space-between;
      transform: translateY(-50%);
    }
    
    .product-slide-arrow {
      cursor: pointer;
      background: rgba(255,255,255,0.7);
      padding: 10px;
      border-radius: 50%;
      margin: 0 15px;
    }
    
    .product-slide-arrow:hover {
      background: rgba(255,255,255,0.9);
    }
    
    .product-arrow-icon {
      width: 20px;
      height: 20px;
    }
    .product-img-slides{
    display: flex;
  justify-content: center;}
  </style>