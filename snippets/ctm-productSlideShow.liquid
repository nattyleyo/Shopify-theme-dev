{%- comment -%}
  Custom product slideshow snippet
  Usage: {% render 'ctm-product-slideShow', images: product.images, settings: section.settings, slideShowId: "product-slideshow" %}
{%- endcomment -%}
<div class="image-display">
  <div class="product-slideShow" data-autoplay="{{ settings.autoplay | default: false }}" data-delay="{{ settings.delay | default: 5 | times: 1000 }}" 
      data-slideshow-id="{{ slideShowId }}">
      <div class="product-img-slides">
        {% for image in images %}
          <img
            src="{{ image | image_url: width: 800 }}"
            loading="lazy"
            width="auto"
            height="auto"
            alt="{{ image.alt | escape }}"
            class="product-slide-image pr-inner-image {% if forloop.first %}active{% endif %}"
            data-index="{{ forloop.index0 }}"
            data-image-id="{{ image.id }}"
          />
        {% else %}
          <div class="product-image-placeholder" style="background: #f5f5f5; height: 500px;"></div>
        {% endfor %}
      </div>
    
      {% if images.size > 1 %}
      <div class="product-slide-buttons">
        <div class="product-slide-arrow left-arrow">
          {{ "icon-arrow-left.svg" | asset_url | img_tag: 'Left arrow', "product-arrow-icon" }}
        </div>
        <div class="product-slide-arrow right-arrow">
          {{ "icon-arrow-right.svg" | asset_url | img_tag: 'Right arrow', "product-arrow-icon" }}
        </div>
      </div>
      {% endif %}
<div class="image-display">
  <div class="product-slideShow" data-autoplay="{{ settings.autoplay | default: false }}" data-delay="{{ settings.delay | default: 5 | times: 1000 }}" 
      data-slideshow-id="{{ slideShowId }}">
      <div class="product-img-slides">
        {% for image in images %}
          <img
            src="{{ image | image_url: width: 800 }}"
            loading="lazy"
            width="auto"
            height="auto"
            alt="{{ image.alt | escape }}"
            class="product-slide-image pr-inner-image {% if forloop.first %}active{% endif %}"
            data-index="{{ forloop.index0 }}"
            data-image-id="{{ image.id }}"
          />
        {% else %}
          <div class="product-image-placeholder" style="background: #f5f5f5; height: 500px;"></div>
        {% endfor %}
      </div>
    
      {% if images.size > 1 %}
      <div class="product-slide-buttons">
        <div class="product-slide-arrow left-arrow">
          {{ "icon-arrow-left.svg" | asset_url | img_tag: 'Left arrow', "product-arrow-icon" }}
        </div>
        <div class="product-slide-arrow right-arrow">
          {{ "icon-arrow-right.svg" | asset_url | img_tag: 'Right arrow', "product-arrow-icon" }}
        </div>
      </div>
      {% endif %}
  </div>
</div>
{% if images.size > 1 %}
  <div class="images-window">
    <div class="dot-indicator">
      {% for image in images %}
        {% comment %} <div class="frame-220"> {% endcomment %}
          <div class="dot-22 {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}" data-image-id="{{ image.id }}"></div>
        {% comment %} </div> {% endcomment %}
      {% endfor %}
    </div>
    <div class="image-indicator">
      {% for image in images %}
        <div class="pr-image {% if forloop.first %}pr-image-active{% endif %}" data-index="{{ forloop.index0 }}" data-image-id="{{ image.id }}">
          <img
            src="{{ image | img_url: '200x' }}"
            loading="lazy"
            width="Auto"
            height="Auto"
            alt="{{ image.alt | escape }}"
            class="pr-inner-image"
            data-image-id="{{ image.id }}"
            data-zoom="{{ image | img_url: '2000x' }}"
          />
        </div>
      {% endfor %}
    </div>
  </div>
{% endif %}
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize each product slideshow
      document.querySelectorAll('.product-slideShow[data-slideshow-id]').forEach(slideshow => {
        const slideShowId = slideshow.dataset.slideshowId;
        const slides = slideshow.querySelectorAll('.product-img-slides .product-slide-image');
        const dots = document.querySelectorAll(`.dot-indicator .dot-22[data-image-id]`);
        const thumbnails = document.querySelectorAll(`.image-indicator .pr-image[data-image-id]`);
        
        if (slides.length <= 1) return;
        
        let currentIndex = 0;
        const totalSlides = slides.length;
        const autoplay = slideshow.dataset.autoplay === 'true';
        const normalDelay = parseInt(slideshow.dataset.delay) || 5000;
        const loopDelay = 1000;
        let autoplayInterval;
        let isManualInteraction = false; // Track manual interactions
        
        // Initialize first slide and indicators
        slides[currentIndex].classList.add('active');
        dots[currentIndex].classList.add('active');
        thumbnails[currentIndex].classList.add('pr-image-active');
        
        function transitionSlides(newIndex) {
          // Update slides
          slides[currentIndex].classList.remove('active');
          slides[newIndex].classList.add('active');
          
          // Update dot indicators
          dots[currentIndex].classList.remove('active');
          dots[newIndex].classList.add('active');
          
          // Update image indicators
          thumbnails[currentIndex].classList.remove('pr-image-active');
          thumbnails[newIndex].classList.add('pr-image-active');
          
          currentIndex = newIndex;
          
          // Dispatch custom event when slide changes
          const event = new CustomEvent('productSlideChanged', {
            detail: {
              imageId: slides[newIndex].dataset.imageId,
              index: newIndex
            }
          });
          slideshow.dispatchEvent(event);
        }
        
        // Create unique function names for this slideshow
        const nextSlideFn = `productNextSlide_${slideShowId}`;
        const prevSlideFn = `productPrevSlide_${slideShowId}`;
        
        window[nextSlideFn] = function() {
          const newIndex = (currentIndex + 1) % totalSlides;
          transitionSlides(newIndex);
          resetAutoplay(newIndex);
        };
        
        window[prevSlideFn] = function() {
          const newIndex = (currentIndex - 1 + totalSlides) % totalSlides;
          transitionSlides(newIndex);
          resetAutoplay(newIndex);
        };
        
        // Update button click handlers
        slideshow.querySelector('.left-arrow').onclick = function() {
          isManualInteraction = true;
          window[prevSlideFn]();
        };
        slideshow.querySelector('.right-arrow').onclick = function() {
          isManualInteraction = true;
          window[nextSlideFn]();
        };
        
        // Add click handlers for dot indicators
        dots.forEach(dot => {
          dot.addEventListener('click', function() {
            const index = parseInt(this.dataset.index);
            if (!isNaN(index) && index >= 0 && index < totalSlides) {
              isManualInteraction = true;
              transitionSlides(index);
              resetAutoplay(index);
            }
          });
        });
        
        // Add click handlers for image indicators
        thumbnails.forEach(thumb => {
          thumb.addEventListener('click', function() {
            const index = parseInt(this.dataset.index);
            if (!isNaN(index) && index >= 0 && index < totalSlides) {
              isManualInteraction = true;
              transitionSlides(index);
              resetAutoplay(index);
            }
          });
        });
        
        // Autoplay functionality
        function startAutoplay(delay) {
          if (autoplay && !isManualInteraction) {
            autoplayInterval = setInterval(window[nextSlideFn], delay);
          }
        }
        
        function stopAutoplay() {
          clearInterval(autoplayInterval);
        }
        
        function resetAutoplay(newIndex) {
          stopAutoplay();
          const isLooping = newIndex === 0;
          if (!isManualInteraction) {
            startAutoplay(isLooping ? loopDelay : normalDelay);
          }
        }
        
        // Initialize autoplay
        startAutoplay(normalDelay);
        
        // Pause on hover, resume only if not manually interacted
        slideshow.addEventListener('mouseenter', stopAutoplay);
        slideshow.addEventListener('mouseleave', () => {
          if (!isManualInteraction) {
            startAutoplay(normalDelay);
          }
        });
        
        // Reset manual interaction flag on arrow clicks or after a delay
        function resetManualInteraction() {
          isManualInteraction = false;
          startAutoplay(normalDelay);
        }
        
        // Reset manual interaction after 10 seconds of inactivity
        slideshow.addEventListener('click', () => {
          setTimeout(resetManualInteraction, 10000);
        });
      });
    });
  </script>
  
  <style>
    .product-slideShow {
      position: relative;
      width: 100%;
    }
    
    .product-img-slides .product-slide-image {
      display: none;
      width: 80%;
      height: auto;
      transition: opacity 0.3s ease;
    }
    
    .product-img-slides .product-slide-image.active {
      display: block;
      animation: productFadeIn 0.5s ease;
    }
    
    @keyframes productFadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    .product-slide-buttons {
      position: absolute;
      top: 50%;
      width: 100%;
      display: flex;
      justify-content: space-between;
      transform: translateY(-50%);
    }
    
    .product-slide-arrow {
      cursor: pointer;
      background: rgba(255,255,255,0.7);
      border: 1px solid #00000024;
      padding: 10px;
      border-radius: 50%;
      margin: 0 15px;
    }
    .product-slide-arrow:hover {
      background: rgb(255, 255, 255);
      border: 1px solid rgba(0, 0, 0, 0.5);
    }
    
    .product-arrow-icon {
      width: 20px;
      height: 20px;
    }
    .product-img-slides {
      display: flex;
      justify-content: center;
    }
    
    /* Dot indicator styles */
    .dot-22 {
      width: 10px;
      height: 10px;
      background-color: #ccc;
      border-radius: 50%;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    
    .dot-22.active {
      background-color: #333;
      transform: scale(1.2);
    }
  </style>